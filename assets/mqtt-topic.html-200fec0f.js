import{_ as e,p as a,q as i,a1 as c}from"./framework-39cc0843.js";const d={},o=c('<h1 id="mqtt-topic-解析" tabindex="-1"><a class="header-anchor" href="#mqtt-topic-解析" aria-hidden="true">#</a> MQTT Topic 解析</h1><h2 id="_1-主题" tabindex="-1"><a class="header-anchor" href="#_1-主题" aria-hidden="true">#</a> 1. 主题</h2><p>订阅与发布消息的目标都是主题（Topic），只有一致的主题才会收到订阅的信息。</p><h2 id="_2-基础格式" tabindex="-1"><a class="header-anchor" href="#_2-基础格式" aria-hidden="true">#</a> 2. 基础格式</h2><p>主题如 <code>room404/tv/contrl/sensor</code> 是使用 <code>/</code> 分隔的字符串。尽量不包含特殊字符，如果是下面的通配符需要使用转义。</p><h2 id="_3-通配符" tabindex="-1"><a class="header-anchor" href="#_3-通配符" aria-hidden="true">#</a> 3. 通配符</h2><p>MQTT 支持下列通配符：</p><ul><li>多层通配符 <code>#</code>，必须置于最后</li><li>单层通配符 <code>+</code>，必须占据整层</li><li>单个字符通配符 <code>$</code>，不能在每一层的最开头</li></ul><h2 id="_4-最佳实践" tabindex="-1"><a class="header-anchor" href="#_4-最佳实践" aria-hidden="true">#</a> 4. 最佳实践</h2><p>不要：</p><ul><li>使用 <code>/</code> 开头的主题，没有意义</li><li>使用 <code>$SYS</code> 开头，这是给 Broker 保留的主题</li><li>使用空格或不可打印字符</li></ul><p>建议：</p><ul><li>将用户 ID 保留在主题内</li><li>给不同用途的功能分配不同的主题</li></ul>',13),t=[o];function r(l,h){return a(),i("div",null,t)}const s=e(d,[["render",r],["__file","mqtt-topic.html.vue"]]);export{s as default};
