import{_ as c,M as p,p as l,q as i,R as n,N as s,V as o,t as a,a1 as r}from"./framework-d3922052.js";const d={},u=n("h1",{id:"开始使用-jetson-nano",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开始使用-jetson-nano","aria-hidden":"true"},"#"),a(" 开始使用 Jetson Nano")],-1),h={class:"table-of-contents"},k=n("h2",{id:"_1-安装硬件板块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-安装硬件板块","aria-hidden":"true"},"#"),a(" 1. 安装硬件板块")],-1),v={class:"hint-container info"},_=n("p",{class:"hint-container-title"},"有用的信息",-1),b={href:"https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.nvidia.com/zh-cn/embedded/learn/get-started-jetson-nano-devkit",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.nvidia.com/embedded/dlc/Jetson_Nano_Developer_Kit_User_Guide",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.waveshare.com/wiki/Jetson_Nano_Case_(C)",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.waveshare.net/wiki/Jetson_Nano_Case_(C)",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"在购买官方 Jetson 开发板时其模块已经安装完成，为了更好地使用 Jetson Nano，推荐购买 Waveshare 系列的保护壳。",-1),T=n("p",null,"但是不同的 Nano 版型和 Waveshare Jetson Nano Case 的版型有所不同，请确认是正确的版本再购买，部分 Jetson Nano 无法适配 TF 转接槽。",-1),x={href:"https://www.waveshare.net/wiki/Jetson_Nano_Case_(C)",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,"有一些可选的硬件：",-1),N=n("ul",null,[n("li",null,"摄像头"),n("li",null,"无线网卡"),n("li",null,"TF 卡")],-1),J=n("p",null,"可任意选择，以方便硬件开发。",-1),C=n("h2",{id:"_2-安装系统",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-安装系统","aria-hidden":"true"},"#"),a(" 2. 安装系统")],-1),D={href:"https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit",target:"_blank",rel:"noopener noreferrer"},R={href:"https://developer.nvidia.com/jetson-nano-sd-card-image",target:"_blank",rel:"noopener noreferrer"},j={href:"https://developer.nvidia.com/embedded/downloads",target:"_blank",rel:"noopener noreferrer"},A={href:"https://developer.nvidia.com/zh-cn/embedded/downloads",target:"_blank",rel:"noopener noreferrer"},I={href:"https://rufus.ie/zh/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.balena.io/etcher/",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"通过 U 盘或 SD 卡启动即可。",-1),S=n("h2",{id:"_3-安装开发基本环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-安装开发基本环境","aria-hidden":"true"},"#"),a(" 3. 安装开发基本环境")],-1),V={href:"https://forums.developer.nvidia.com/t/72048",target:"_blank",rel:"noopener noreferrer"},W=r(`<ul><li>JetPack 4.4 (L4T R32.4.3)</li><li>JetPack 4.4.1 (L4T R32.4.4)</li><li>JetPack 4.5 (L4T R32.5.0)</li><li>JetPack 4.5.1 (L4T R32.5.1)</li><li>JetPack 4.6 (L4T R32.6.1)</li></ul><h3 id="_3-1-设置环境" tabindex="-1"><a class="header-anchor" href="#_3-1-设置环境" aria-hidden="true">#</a> 3.1 设置环境</h3><p>更新源：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> upgrade
</code></pre></div><p>更新 <code>pip</code> 和镜像：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">--upgrade</span> pip
pip3 config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre></div><div class="hint-container info"><p class="hint-container-title">发行版本</p><p>下面的设置基于 Ubuntu 18，其他版本请参考官方网站。</p></div><p>安装 CUDA 工具包和 cuDNN：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> cuda-toolkit-10-2
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libcudnn8
</code></pre></div><p>安装 TensorRT 和 TensorRT Python 包：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nvidia-tensorrt
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-libnvinfer
</code></pre></div><p>添加 CUDA 工具路径到 PATH：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;export PATH=$PATH:/usr/local/cuda-10.2/bin&#39;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
<span class="token builtin class-name">source</span> ~/.bashrc
</code></pre></div><h3 id="_3-2-安装-pytorch" tabindex="-1"><a class="header-anchor" href="#_3-2-安装-pytorch" aria-hidden="true">#</a> 3.2 安装 PyTorch</h3><p>请确保选择正确的 PyTorch 和 Torchvision 版本。</p><p>其中 <code>v0.8.0</code> 和 Python 3.6 对应，其他版本对应表如下。</p><table><thead><tr><th>PyTorch 版本</th><th>Torchvision 版本</th></tr></thead><tbody><tr><td>PyTorch v1.6</td><td>torchvision v0.7.0</td></tr><tr><td>PyTorch v1.7</td><td>torchvision v0.8.1</td></tr><tr><td>PyTorch v1.8</td><td>torchvision v0.9.0</td></tr><tr><td>PyTorch v1.9</td><td>torchvision v0.10.0</td></tr><tr><td>PyTorch v1.10</td><td>torchvision v0.11.1</td></tr><tr><td>PyTorch v1.11</td><td>torchvision v0.12.0</td></tr><tr><td>PyTorch v1.12</td><td>torchvision v0.13.0</td></tr></tbody></table><p>PyTorch v1.6.0 到 PyTorch v1.10.0 使用 Python 3.6，PyTorch v1.11.0 到 PyTorch v1.12.0 使用 Python 3.8。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://nvidia.box.com/shared/static/p57jwntv436lfrd78inwl7iml6p13fzh.whl <span class="token parameter variable">-O</span> torch-1.8.0-cp36-cp36m-linux_aarch64.whl
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip libopenblas-base libopenmpi-dev libomp-dev
pip3 <span class="token function">install</span> Cython
pip3 <span class="token function">install</span> numpy torch-1.8.0-cp36-cp36m-linux_aarch64.whl
</code></pre></div><p>如果下载不方便可以在电脑上下载后传到 Nano 上。</p><h3 id="_3-3-安装-torchvision" tabindex="-1"><a class="header-anchor" href="#_3-3-安装-torchvision" aria-hidden="true">#</a> 3.3 安装 Torchvision</h3><p>先安装 Pillow：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> pillow
</code></pre></div><p>然后执行下面的命令编译安装 Torchvision：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev

<span class="token function">git</span> clone <span class="token parameter variable">--branch</span> v0.8.0 https://github.com/pytorch/vision torchvision
<span class="token builtin class-name">cd</span> torchvision
<span class="token builtin class-name">export</span> <span class="token assign-left variable">BUILD_VERSION</span><span class="token operator">=</span><span class="token number">0.8</span>.0
python3 setup.py <span class="token function">install</span> <span class="token parameter variable">--user</span>
</code></pre></div><p>检查安装结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> torch

<span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;CUDA available: &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;cuDNN version: &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Tensor a = &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Tensor b = &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> a <span class="token operator">+</span> b
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Tensor c = &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">import</span> torchvision
<span class="token keyword">print</span><span class="token punctuation">(</span>torchvision<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-安装-torch2trt" tabindex="-1"><a class="header-anchor" href="#_3-4-安装-torch2trt" aria-hidden="true">#</a> 3.4 安装 torch2trt</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/NVIDIA-AI-IOT/torch2trt <span class="token parameter variable">--depth</span> <span class="token number">1</span>
<span class="token builtin class-name">cd</span> torch2trt
<span class="token function">sudo</span> python3 setup.py <span class="token function">install</span> <span class="token parameter variable">--plugins</span>
</code></pre></div><h2 id="_4-高性能模式" tabindex="-1"><a class="header-anchor" href="#_4-高性能模式" aria-hidden="true">#</a> 4. 高性能模式</h2><p>除了 <strong>无桌面模式</strong> 和 <strong>swap 虚拟内存</strong> 外，还可以提高功耗和解除硬件限制来提高性能。</p><p>查看当前工作模式：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> nvpmodel <span class="token parameter variable">-q</span>
</code></pre></div><p>将工作模式设置为最大功率（10 W）：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> nvpmodel <span class="token parameter variable">-m</span> <span class="token number">0</span>
</code></pre></div><p>将工作模式设定为低功率（5 W）：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> nvpmodel <span class="token parameter variable">-m</span> <span class="token number">1</span>
</code></pre></div><p>解除硬件限制：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> jetson_clocks
</code></pre></div>`,39);function z(B,E){const e=p("router-link"),t=p("ExternalLinkIcon");return l(),i("div",null,[u,n("nav",h,[n("ul",null,[n("li",null,[s(e,{to:"#_1-安装硬件板块"},{default:o(()=>[a("1. 安装硬件板块")]),_:1})]),n("li",null,[s(e,{to:"#_2-安装系统"},{default:o(()=>[a("2. 安装系统")]),_:1})]),n("li",null,[s(e,{to:"#_3-安装开发基本环境"},{default:o(()=>[a("3. 安装开发基本环境")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_3-1-设置环境"},{default:o(()=>[a("3.1 设置环境")]),_:1})]),n("li",null,[s(e,{to:"#_3-2-安装-pytorch"},{default:o(()=>[a("3.2 安装 PyTorch")]),_:1})]),n("li",null,[s(e,{to:"#_3-3-安装-torchvision"},{default:o(()=>[a("3.3 安装 Torchvision")]),_:1})]),n("li",null,[s(e,{to:"#_3-4-安装-torch2trt"},{default:o(()=>[a("3.4 安装 torch2trt")]),_:1})])])]),n("li",null,[s(e,{to:"#_4-高性能模式"},{default:o(()=>[a("4. 高性能模式")]),_:1})])])]),k,n("div",v,[_,n("ul",null,[n("li",null,[n("a",b,[a("Jetson Nano 官方指南"),s(t)]),a("，另外有 "),n("a",g,[a("中文版"),s(t)]),a("，建议阅读英文版以确保最新")]),n("li",null,[n("a",f,[a("Jetson Nano 官方指南 PDF"),s(t)])]),n("li",null,[n("a",m,[a("Waveshare Wiki: Jetson Nano Case (C)"),s(t)]),a("，另外有 "),n("a",y,[a("中文版"),s(t)])])])]),w,T,n("p",null,[a("这里使用的是金属壳套装（即 C 型号），请参考 "),n("a",x,[a("官方 Wiki"),s(t)]),a(" 以进行适配安装，其他型号同理。")]),P,N,J,C,n("p",null,[a("推荐参考 "),n("a",D,[a("Jetson Nano 官方指南"),s(t)]),a(" 进行安装，安装系统时最好有显示屏，完成初始化配置后可以使用 SSH 连接。")]),n("p",null,[a("下载 Jetson Nano 系统镜像，"),n("a",R,[a("最新版下载地址"),s(t)]),a("。如果需要其他版本的镜像，请到 "),n("a",j,[a("下载中心"),s(t)]),a(" 查看，下载中心同样有中文版："),n("a",A,[a("下载中心（中文）"),s(t)]),a("。")]),n("p",null,[a("使用 "),n("a",I,[a("Rufus"),s(t)]),a(" 或者 "),n("a",L,[a("balenaEtcher"),s(t)]),a(" 等烧录软件，烧录下载得到的镜像文件到 U 盘或者 SD 卡。建议容量大于等于 64 GB，可能会安装各种驱动和软件。")]),U,S,n("p",null,[a("此环境可以基于不同版本的 Python，其对应版本可参考 "),n("a",V,[a("官方博客"),s(t)]),a("，本文基于官方镜像的 Python 3.6。不同的版本使用 JetPack 版本也不同，本文支持的 JetPack 版本：")]),W])}const H=c(d,[["render",z],["__file","get-started.html.vue"]]);export{H as default};
