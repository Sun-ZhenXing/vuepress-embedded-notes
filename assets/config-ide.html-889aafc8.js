import{_ as t,M as i,p as c,q as r,R as e,t as n,N as a,a1 as s}from"./framework-8980b429.js";const p={},l=e("h1",{id:"micropython-配置-ide",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#micropython-配置-ide","aria-hidden":"true"},"#"),n(" MicroPython 配置 IDE")],-1),d=e("h2",{id:"_1-开发环境",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-开发环境","aria-hidden":"true"},"#"),n(" 1. 开发环境")],-1),h={href:"https://thonny.org/",target:"_blank",rel:"noopener noreferrer"},u=s(`<p>在 Thonny 中，如果你想将文件下载到 Pico 中，只需要保存到 Pico 即可，而且 Thonny 支持交互模式的 Pico。如果你想删除一个文件，只需要选择打开 Pico 上的文件，然后右键删除你想删除的文件即可。</p><p>但是 Thonny 开发 Python 效率较低，缺少 Hints（语法提示和错误提示），我们需要功能健全的 IDE 开发 Python。很多情况下，我们只是需要开发的 IDE 支持 Hints，而不需要安装整个 MicroPython 环境，下面我们举例几种 IDE 支持 MicroPython Hints 的方法。</p><h2 id="_2-提供语法提示" tabindex="-1"><a class="header-anchor" href="#_2-提供语法提示" aria-hidden="true">#</a> 2. 提供语法提示</h2><p>下面提供几种语法提示的解决方法，仅供参考。</p><h3 id="_2-1-vs-code-引入存根文件" tabindex="-1"><a class="header-anchor" href="#_2-1-vs-code-引入存根文件" aria-hidden="true">#</a> 2.1 VS Code 引入存根文件</h3><p>下面的设置依赖于 Pylance 插件，确保你的 VS Code 的 Python 插件是 Pylance。</p><p>引入 MicroPython 的存根文件（Stub files，即 <code>.pyi</code> 文件）即可，可以克隆下面的项目：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/vlasovskikh/intellij-micropython.git
</code></pre></div><p>例如，我将其放到 <code>D:\\WorkSpace\\intellij-micropython</code> 下面，那么只需要配置 VS Code 工作区设置即可（添加文件 <code>.vscode/settings.json</code>）：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;python.analysis.extraPaths&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;D:\\\\WorkSpace\\\\intellij-micropython\\\\typehints\\\\rpi_pico&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;D:\\\\WorkSpace\\\\intellij-micropython\\\\typehints\\\\micropython&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;D:\\\\WorkSpace\\\\intellij-micropython\\\\typehints\\\\stdlib&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;python.analysis.diagnosticSeverityOverrides&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;reportMissingModuleSource&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>reportMissingModuleSource</code> 配置原因是如果 Pylance 发现了 <code>.pyi</code> 存根文件，但是没有发现源文件，Pylance 就会认为这个库无法加载，并给出警告。但是一般情况下这种问题不会发生，所以我们禁用了这个警告。</p><p>由于我只用于开发 RaspberryPi Pico，所以我只引入了标准库和 <code>rpi_pico</code> 依赖，你可以根据需求选择自己的依赖。</p><p>此时，我可以正常开发任何 MicroPython 应用了，代码自动补全还包含英文的注解，免去许多查文档的麻烦。</p><h3 id="_2-2-用于-intellij-系列产品" tabindex="-1"><a class="header-anchor" href="#_2-2-用于-intellij-系列产品" aria-hidden="true">#</a> 2.2 用于 IntelliJ 系列产品</h3>`,14),y={href:"https://plugins.jetbrains.com/plugin/9777-micropython",target:"_blank",rel:"noopener noreferrer"},v=s(`<p>目前（2022-05-15）支持的开发板：</p><ul><li>ESP8266</li><li>PyBoard</li><li>BBC Micro:bit</li><li>Raspberry Pi Pico</li></ul><h3 id="_2-3-全局设置" tabindex="-1"><a class="header-anchor" href="#_2-3-全局设置" aria-hidden="true">#</a> 2.3 全局设置</h3><p>使用 <code>micropython-stubber</code> 可对多数 MicroPython 程序提供语法提示。</p><div class="hint-container warning"><p class="hint-container-title">破坏性警告</p><p>这可能对你的 Python 依赖包产生破坏性修改，所以请使用 <code>venv</code> 等工具创建虚拟环境专门用于 MicroPython 的开发。</p></div><p>如果你想为大多数 MicroPython 程序设置自动补全，可以使用下面的库：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> micropython-stubber
</code></pre></div><p>对于这个库本文作者没有进行测试，而且可能和很多库的配置有冲突，我就暂且不使用它了。</p>`,8);function _(m,b){const o=i("ExternalLinkIcon");return c(),r("div",null,[l,d,e("p",null,[n("根据树莓派官网的提示，目前对 Pico 支持性最好的 IDE 是 "),e("a",h,[n("Thonny"),a(o)]),n("，建议安装最新版本的 Thonny 来调试 Pico。")]),u,e("p",null,[n("我们注意到上面的项目其实是为 IntelliJ 打造的插件，包括 PyCharm 等在内都可以使用，直接装在 IDE 里面。下载地址："),e("a",y,[n("https://plugins.jetbrains.com/plugin/9777-micropython"),a(o)]),n("，可以使用插件获得完整开发体验。")]),v])}const k=t(p,[["render",_],["__file","config-ide.html.vue"]]);export{k as default};
